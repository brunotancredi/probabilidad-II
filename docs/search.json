[
  {
    "objectID": "TCL.html#repaso",
    "href": "TCL.html#repaso",
    "title": "Teorema del Límite Central",
    "section": "Repaso",
    "text": "Repaso\nSea \\(X_1, X_2, \\dots, X_n\\) una sucesión de variables aleatorias i.i.d. con esperanza finita \\(\\mu\\) y varianza finita \\(\\sigma^2\\), y \\(\\bar{X}_n = \\frac{X_1 + X_2 + \\dots + X_n}{n}\\).\nEntonces, cuando \\(n \\to \\infty\\),\n\\[\n\\mathbb{P} \\left( \\frac{\\sqrt{n} (\\bar{X}_n - \\mu)}{\\sigma} \\leq x \\right) \\to \\Phi(x) \\quad \\text{para todo } x \\in \\mathbb{R}\n\\]"
  },
  {
    "objectID": "TCL.html#ejercicio",
    "href": "TCL.html#ejercicio",
    "title": "Teorema del Límite Central",
    "section": "Ejercicio",
    "text": "Ejercicio\nDesarrollar el ejemplo 3, generando N= 100, 500, 1000 realizaciones de la sucesión del Error normalizado y construir histogramas/estimación de densidades con los 100, 500, 1000 valores obtenidos cuando M = 500 y 1000. Comparar los histogramas/estimación de densidades así obtenidos con la densidad de una distribución normal centrada con varianza igual a Var(U_1), U_1 ~ Uniforme(0,1). Interpretar los resultados obtenidos."
  },
  {
    "objectID": "TCL.html#ejercicio---solución-para-n-1000",
    "href": "TCL.html#ejercicio---solución-para-n-1000",
    "title": "Teorema del Límite Central",
    "section": "Ejercicio - Solución para N = 1000",
    "text": "Ejercicio - Solución para N = 1000\n\n### Ejercicio propuesto: desarrollar el ejemplo 3, generando N= 100, 500, 1000 realizaciones de la sucesión del Error normalizado y construir histogramas/estimación de densidades con los 100, 500, 1000 valores obtenidos cuando M = 500 y 1000. Comparar los histogramas/estimación de densidades así obtenidos con la densidad de una distribución normal centrada con varianza igual a Var(U_1), U_1 ~ Uniforme(0,1). Interpretar los resultados obtenidos.\n\nrm(list=ls())\nlibrary(ggplot2)\nlibrary(tidyr)\n\n# Establecer semilla global para reproducibilidad\nset.seed(123)  # Semilla fija para generar las semillas aleatorias\n\n# Función para generar simulaciones del error normalizado\nsimula_error_normalizado &lt;- function(seed, M) {\n  set.seed(seed)  # Semilla específica para cada simulación\n  U &lt;- runif(M)  # Muestras uniformes\n  running_mean &lt;- cumsum(U) / (1:M)  # Media muestral acumulada\n  norm_error &lt;- sqrt(1:M) * (running_mean - 0.5)  # Error normalizado\n  return(norm_error[c(500, 1000, 2000, 5000)])  # Devuelve el error normalizado en M=500, M=1000, M=2000 y M=5000\n}\n\n# Parámetros de simulación\nN &lt;- 1000 # 500, 1000 Número de simulaciones\n\n# Generar semillas aleatorias reproducibles\nsemillas &lt;- sample(1:10^6, N, replace = FALSE)\n\n# Generar simulaciones para los valores de M especificados\nresultados &lt;- t(sapply(semillas, simula_error_normalizado, M = 5000))\ncolnames(resultados) &lt;- c(\"M500\", \"M1000\", \"M2000\", \"M5000\")\nresultados_df &lt;- data.frame(resultados)\n\n# identificador ficticio \nresultados_df$id &lt;- 1:nrow(resultados_df)\n\n# Transformar a formato largo especificando id.vars\nresultados_long &lt;- pivot_longer(resultados_df, \n                        cols = -id,\n                        names_to = 'M',\n                        values_to = 'Error')\n\n# Convertir la columna 'M' en factor\nresultados_long$M &lt;- factor(resultados_long$M, \n          levels = c(\"M500\", \"M1000\", \"M2000\", \"M5000\"),\n          labels = c(\"M = 500\", \"M = 1000\", \"M = 2000\", \"M = 5000\"))\n\n# Crear datos para la densidad teórica de la normal con media 0 y varianza 1/12\nx_values &lt;- seq(-1.5, 1.5, length.out = 1000)\ndensity_normal &lt;- dnorm(x_values, mean = 0, sd = sqrt(1/12))\n\n# Título dinámico con el valor de N\ntitulo &lt;- paste(\"Histograma y estimación de densidad del error normalizado\\n\", \"con densidad teórica N(0, 1/12) - N =\", N)\n\n# Gráfico con cuatro paneles\nggplot(resultados_long, aes(x = Error)) +\n  geom_histogram(aes(y = ..density..), bins = 30, fill = \"blue\", alpha = 0.4) +\n  geom_density(fill = \"blue\", alpha = 0.2) +\n  geom_line(data = data.frame(x_values, density_normal),\n            aes(x = x_values, y = density_normal),\n            color = \"red\", linetype = \"dashed\", size = 1) +\n  facet_wrap(~ M, ncol = 2) + # Organizar en una cuadrícula de dos columnas\n  labs(title = titulo,\n       x = \"Error normalizado\",\n       y = \"Densidad\") +\n  theme_minimal() +\n  theme(strip.text = element_text(face = \"bold\"))"
  },
  {
    "objectID": "TCL.html#visualización-tcl-con-u01",
    "href": "TCL.html#visualización-tcl-con-u01",
    "title": "Teorema del Límite Central",
    "section": "Visualización TCL con U(0,1)",
    "text": "Visualización TCL con U(0,1)\n\nimport { aq, op } from '@uwdata/arquero'\n\nmy_data = aq.from(transpose(ojs_data))\n\nviewof n = Inputs.range(\n  [1, 400], \n  {value: 1, step: 1, label: \"Tamaño muestra:\"}\n)\n\nviewof distribucion = Inputs.radio([\"uniforme\", \"exponencial\"], {value: \"uniforme\", label: \"Distribución\"})\n\nnormalData = Array.from({ length: 100 }, (_, i) =&gt; {\n  let x = -3 + (i / 99) * 6; // Range from -3 to 3\n  return { x, y: Math.exp(-0.5 * x * x) / Math.sqrt(2 * Math.PI) };\n});\n\n\nmy_data_2 = my_data.params({ distribucion }).filter(d =&gt; d.distribucion === distribucion);\n\n\npoint = Array.from({length: 1}, (_, i) =&gt; {return {x: 0, y: 0.5}})\n\nPlot.plot({\n    width: 1000,\n    height: 500,\n    y: {grid: true},\n    x: {round: true},    \n    marks: [\n      Plot.rectY(my_data_2, \n                Plot.binX({y: (a, bin) =&gt; {\n                              return a.length / (10000*(bin.x2 - bin.x1));\n                           }}, \n                          {x: {value: n.toString(), \n                               inset: 0,\n                               thresholds: d3.range(-3,3 + 0.11, 0.11),\n                               domain: [-3, 3],\n                               }})),\n      Plot.ruleY([0]),\n      Plot.line(normalData, { x: \"x\", y: \"y\", stroke: \"red\" }), //Normal\n      Plot.dot(point, {x: \"x\", y: \"y\", r: 0})    \n    ]\n})"
  },
  {
    "objectID": "TCL.html#recomendación",
    "href": "TCL.html#recomendación",
    "title": "Teorema del Límite Central",
    "section": "Recomendación",
    "text": "Recomendación"
  },
  {
    "objectID": "TCL_2.html#repaso",
    "href": "TCL_2.html#repaso",
    "title": "Teorema del Límite Central",
    "section": "Repaso",
    "text": "Repaso\nSea \\(X_1, X_2, \\dots, X_n\\) una sucesión de variables aleatorias i.i.d. con esperanza finita \\(\\mu\\) y varianza finita \\(\\sigma^2\\), y \\(\\bar{X}_n = \\frac{X_1 + X_2 + \\dots + X_n}{n}\\).\nEntonces, cuando \\(n \\to \\infty\\),\n\\[\n\\mathbb{P} \\left( \\frac{\\sqrt{n} (\\bar{X}_n - \\mu)}{\\sigma} \\leq x \\right) \\to \\Phi(x) \\quad \\text{para todo } x \\in \\mathbb{R}\n\\]"
  },
  {
    "objectID": "TCL_2.html#ejercicio",
    "href": "TCL_2.html#ejercicio",
    "title": "Teorema del Límite Central",
    "section": "Ejercicio",
    "text": "Ejercicio\nDesarrollar el ejemplo 3, generando N= 100, 500, 1000 realizaciones de la sucesión del Error normalizado y construir histogramas/estimación de densidades con los 100, 500, 1000 valores obtenidos cuando M = 500 y 1000. Comparar los histogramas/estimación de densidades así obtenidos con la densidad de una distribución normal centrada con varianza igual a Var(U_1), U_1 ~ Uniforme(0,1). Interpretar los resultados obtenidos."
  },
  {
    "objectID": "TCL_2.html#ejercicio---solución-para-n-1000",
    "href": "TCL_2.html#ejercicio---solución-para-n-1000",
    "title": "Teorema del Límite Central",
    "section": "Ejercicio - Solución para N = 1000",
    "text": "Ejercicio - Solución para N = 1000\n\n### Ejercicio propuesto: desarrollar el ejemplo 3, generando N= 100, 500, 1000 realizaciones de la sucesión del Error normalizado y construir histogramas/estimación de densidades con los 100, 500, 1000 valores obtenidos cuando M = 500 y 1000. Comparar los histogramas/estimación de densidades así obtenidos con la densidad de una distribución normal centrada con varianza igual a Var(U_1), U_1 ~ Uniforme(0,1). Interpretar los resultados obtenidos.\n\nrm(list=ls())\nlibrary(ggplot2)\nlibrary(tidyr)\n\n# Establecer semilla global para reproducibilidad\nset.seed(123)  # Semilla fija para generar las semillas aleatorias\n\n# Función para generar simulaciones del error normalizado\nsimula_error_normalizado &lt;- function(seed, M) {\n  set.seed(seed)  # Semilla específica para cada simulación\n  U &lt;- runif(M)  # Muestras uniformes\n  running_mean &lt;- cumsum(U) / (1:M)  # Media muestral acumulada\n  norm_error &lt;- sqrt(1:M) * (running_mean - 0.5)  # Error normalizado\n  return(norm_error[c(500, 1000, 2000, 5000)])  # Devuelve el error normalizado en M=500, M=1000, M=2000 y M=5000\n}\n\n# Parámetros de simulación\nN &lt;- 1000 # 500, 1000 Número de simulaciones\n\n# Generar semillas aleatorias reproducibles\nsemillas &lt;- sample(1:10^6, N, replace = FALSE)\n\n# Generar simulaciones para los valores de M especificados\nresultados &lt;- t(sapply(semillas, simula_error_normalizado, M = 5000))\ncolnames(resultados) &lt;- c(\"M500\", \"M1000\", \"M2000\", \"M5000\")\nresultados_df &lt;- data.frame(resultados)\n\n# identificador ficticio \nresultados_df$id &lt;- 1:nrow(resultados_df)\n\n# Transformar a formato largo especificando id.vars\nresultados_long &lt;- pivot_longer(resultados_df, \n                        cols = -id,\n                        names_to = 'M',\n                        values_to = 'Error')\n\n# Convertir la columna 'M' en factor\nresultados_long$M &lt;- factor(resultados_long$M, \n          levels = c(\"M500\", \"M1000\", \"M2000\", \"M5000\"),\n          labels = c(\"M = 500\", \"M = 1000\", \"M = 2000\", \"M = 5000\"))\n\n# Crear datos para la densidad teórica de la normal con media 0 y varianza 1/12\nx_values &lt;- seq(-1.5, 1.5, length.out = 1000)\ndensity_normal &lt;- dnorm(x_values, mean = 0, sd = sqrt(1/12))\n\n# Título dinámico con el valor de N\ntitulo &lt;- paste(\"Histograma y estimación de densidad del error normalizado\\n\", \"con densidad teórica N(0, 1/12) - N =\", N)\n\n# Gráfico con cuatro paneles\nggplot(resultados_long, aes(x = Error)) +\n  geom_histogram(aes(y = ..density..), bins = 30, fill = \"blue\", alpha = 0.4) +\n  geom_density(fill = \"blue\", alpha = 0.2) +\n  geom_line(data = data.frame(x_values, density_normal),\n            aes(x = x_values, y = density_normal),\n            color = \"red\", linetype = \"dashed\", size = 1) +\n  facet_wrap(~ M, ncol = 2) + # Organizar en una cuadrícula de dos columnas\n  labs(title = titulo,\n       x = \"Error normalizado\",\n       y = \"Densidad\") +\n  theme_minimal() +\n  theme(strip.text = element_text(face = \"bold\"))"
  },
  {
    "objectID": "TCL_2.html#visualización-tcl-con-u01",
    "href": "TCL_2.html#visualización-tcl-con-u01",
    "title": "Teorema del Límite Central",
    "section": "Visualización TCL con U(0,1)",
    "text": "Visualización TCL con U(0,1)\n\nimport { aq, op } from '@uwdata/arquero'\n\nmy_data = aq.from(transpose(ojs_data))\n\nviewof n = Inputs.range(\n  [1, 400], \n  {value: 1, step: 1, label: \"Tamaño muestra:\"}\n)\n\nviewof distribucion = Inputs.radio([\"uniforme\", \"exponencial\"], {value: \"uniforme\", label: \"Distribución\"})\n\nnormalData = Array.from({ length: 100 }, (_, i) =&gt; {\n  let x = -3 + (i / 99) * 6; // Range from -3 to 3\n  return { x, y: Math.exp(-0.5 * x * x) / Math.sqrt(2 * Math.PI) };\n});\n\n\nmy_data_2 = my_data.params({ distribucion }).filter(d =&gt; d.distribucion === distribucion);\n\n\npoint = Array.from({length: 1}, (_, i) =&gt; {return {x: 0, y: 0.5}})\n\nPlot.plot({\n    width: 1000,\n    height: 500,\n    y: {grid: true},\n    x: {round: true},    \n    marks: [\n      Plot.rectY(my_data_2, \n                Plot.binX({y: (a, bin) =&gt; {\n                              return a.length / (1000*(bin.x2 - bin.x1));\n                           }}, \n                          {x: {value: n.toString(), \n                               inset: 0,\n                               thresholds: d3.range(-3,3 + 0.11, 0.11),\n                               domain: [-3, 3],\n                               }})),\n      Plot.ruleY([0]),\n      Plot.line(normalData, { x: \"x\", y: \"y\", stroke: \"red\" }), //Normal\n      Plot.dot(point, {x: \"x\", y: \"y\", r: 0})    \n    ]\n})"
  },
  {
    "objectID": "TCL_2.html#recomendación",
    "href": "TCL_2.html#recomendación",
    "title": "Teorema del Límite Central",
    "section": "Recomendación",
    "text": "Recomendación"
  },
  {
    "objectID": "TCL_2.html#visualización-tcl",
    "href": "TCL_2.html#visualización-tcl",
    "title": "Teorema del Límite Central",
    "section": "Visualización TCL",
    "text": "Visualización TCL\n\nimport { aq, op } from '@uwdata/arquero'\n\nmy_data = aq.from(transpose(ojs_data))\n\nviewof n = Inputs.range(\n  [1, 400], \n  {value: 1, step: 1, label: \"Tamaño muestra:\"}\n)\n\nviewof distribucion = Inputs.radio([\"uniforme\", \"exponencial\"], {value: \"uniforme\", label: \"Distribución\"})\n\nnormalData = Array.from({ length: 100 }, (_, i) =&gt; {\n  let x = -3 + (i / 99) * 6; // Range from -3 to 3\n  return { x, y: Math.exp(-0.5 * x * x) / Math.sqrt(2 * Math.PI) };\n});\n\n\nmy_data_2 = my_data.params({ distribucion }).filter(d =&gt; d.distribucion === distribucion);\n\n\npoint = Array.from({length: 1}, (_, i) =&gt; {return {x: 0, y: 0.5}})\n\nPlot.plot({\n    width: 1000,\n    height: 500,\n    y: {grid: true},\n    x: {round: true},    \n    marks: [\n      Plot.rectY(my_data_2, \n                Plot.binX({y: (a, bin) =&gt; {\n                              return a.length / (100*(bin.x2 - bin.x1));\n                           }}, \n                          {x: {value: n.toString(), \n                               inset: 0,\n                               thresholds: d3.range(-3,3 + 0.11, 0.11),\n                               domain: [-3, 3],\n                               }})),\n      Plot.ruleY([0]),\n      Plot.line(normalData, { x: \"x\", y: \"y\", stroke: \"red\" }), //Normal\n      Plot.dot(point, {x: \"x\", y: \"y\", r: 0})    \n    ]\n})"
  }
]